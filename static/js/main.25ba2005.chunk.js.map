{"version":3,"sources":["RecipeTile.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeTile","recipe","match","className","onClick","window","open","src","App","useState","query","setQuery","recipes","setRecipes","healthLabel","sethealthLabel","url","a","axios","get","result","data","hits","console","log","onSubmit","e","preventDefault","getRecipes","type","placeholder","value","onChange","target","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAGe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,OAChC,OAGO,MADHA,EAAM,OAAN,MAA0BC,MAAM,0BAEhC,sBAAKC,UAAU,aAAaC,QAAS,WACjCC,OAAOC,KAAKL,EAAM,OAAN,MADhB,UAGI,qBAAKE,UAAU,iBAAiBI,IAAKN,EAAM,OAAN,QACrC,mBAAGE,UAAU,kBAAb,SAAgCF,EAAM,OAAN,WCyD7BO,MAhEf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsCJ,mBAAS,SAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAKIC,EAAG,8CACLN,EADK,mBAFa,WAEb,oBAHc,mCAGd,uBAEGI,GAVG,4CAYb,4BAAAG,EAAA,sEAEqBC,IAAMC,IAAIH,GAF/B,OAEMI,EAFN,OAGEP,EAAWO,EAAOC,KAAKC,MACvBC,QAAQC,IAAIJ,EAAOC,MAJrB,4CAZa,sBAwBb,OACE,sBAAKlB,UAAU,MAAf,UACE,gEACA,uBAAMA,UAAU,iBAAiBsB,SARpB,SAACC,GAChBA,EAAEC,iBApBS,mCAqBXC,IAME,UACE,uBAAOC,KAAK,OACZ1B,UAAU,YACT2B,YAAY,mBACZC,MAAOrB,EACPsB,SAAU,SAACN,GAAD,OAAOf,EAASe,EAAEO,OAAOF,UAEnC,uBAAO5B,UAAU,aACjB0B,KAAK,SACLE,MAAM,WAEN,yBAAQ5B,UAAU,mBAAlB,UACE,wBAAQC,QAAS,kBAAKW,EAAe,UAArC,mBACA,wBAAQX,QAAS,kBAAKW,EAAe,eAArC,wBACA,wBAAQX,QAAS,kBAAKW,EAAe,UAArC,mBACA,wBAAQX,QAAS,kBAAKW,EAAe,eAArC,wBACA,wBAAQX,QAAS,kBAAKW,EAAe,gBAArC,yBACA,wBAAQX,QAAS,kBAAKW,EAAe,eAArC,wBACA,wBAAQX,QAAS,kBAAKW,EAAe,cAArC,uBACA,wBAAQX,QAAS,kBAAKW,EAAe,aAArC,sBACA,wBAAQX,QAAS,kBAAKW,EAAe,gBAArC,yBACA,wBAAQX,QAAS,kBAAKW,EAAe,kBAArC,2BACA,wBAAQX,QAAS,kBAAKW,EAAe,aAArC,sBACA,wBAAQX,QAAS,kBAAKW,EAAe,cAArC,uBACA,wBAAQX,QAAS,kBAAKW,EAAe,mBAArC,kCAIL,qBAAKZ,UAAU,cAAf,SACGS,EAAQsB,KAAI,SAAAjC,GACX,OAAO,cAAC,EAAD,CAAYA,OAAQA,aClDtBkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.25ba2005.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./RecipeTile.css\";\r\n\r\nexport default function RecipeTile({recipe}) {\r\n    return (\r\n        //if image is not available, don't show that recipetile.\r\n        recipe[\"recipe\"][\"image\"].match(/\\.(jpeg|jpg|gif|png)$/)\r\n        != null && (\r\n        <div className=\"recipeTile\" onClick={()=>{\r\n            window.open(recipe[\"recipe\"][\"url\"]);\r\n        }}>\r\n            <img className=\"recipeTile_img\" src={recipe[\"recipe\"][\"image\"]}/>\r\n            <p className=\"recipeTile_name\">{recipe[\"recipe\"][\"label\"]}</p>\r\n        </div>\r\n        )\r\n    )\r\n}\r\n","import './App.css';\nimport axios from 'axios';\nimport {useState} from 'react';\nimport RecipeTile from './RecipeTile';\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [recipes, setRecipes] = useState([]);\n  const [healthLabel, sethealthLabel] = useState(\"vegan\");\n\n  const YOUR_APP_KEY = \"ec25740ff4dede4027c00dca1211a5e9\";\n  const YOUR_APP_ID = \"464a4b1d\";\n\n  var url = `https://api.edamam.com/search?q=\n  ${query}&app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}\n  &health=${healthLabel}`;\n\n  async function getRecipes(){\n    //getting info from api is gonna take some time. await waits till it is done.\n    var result = await axios.get(url);\n    setRecipes(result.data.hits);\n    console.log(result.data);\n  }\n\n  const onSubmit = (e) =>{\n    e.preventDefault();\n    getRecipes();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Food Recipes Havenüçî</h1>\n      <form className=\"app_searchForm\" onSubmit={onSubmit}>\n        <input type=\"text\"\n        className=\"app_input\"\n         placeholder=\"Enter ingredient\"\n         value={query}\n         onChange={(e) => setQuery(e.target.value)}\n         />\n         <input className=\"app_submit\"\n         type=\"submit\"\n         value=\"Search\"\n         />\n         <select className=\"app_healthLabels\">\n           <option onClick={()=> sethealthLabel(\"vegan\")}>vegan</option>\n           <option onClick={()=> sethealthLabel(\"vegetarian\")}>vegetarian</option>\n           <option onClick={()=> sethealthLabel(\"paleo\")}>paleo</option>\n           <option onClick={()=> sethealthLabel(\"dairy-free\")}>dairy-free</option>\n           <option onClick={()=> sethealthLabel(\"gluten-free\")}>gluten-free</option>\n           <option onClick={()=> sethealthLabel(\"wheat-free\")}>wheat-free</option>\n           <option onClick={()=> sethealthLabel(\"low-sugar\")}>low-sugar</option>\n           <option onClick={()=> sethealthLabel(\"egg-free\")}>egg-free</option>\n           <option onClick={()=> sethealthLabel(\"peanut-free\")}>peanut-free</option>\n           <option onClick={()=> sethealthLabel(\"tree-nut-free\")}>tree-nut-free</option>\n           <option onClick={()=> sethealthLabel(\"soy-free\")}>soy-free</option>\n           <option onClick={()=> sethealthLabel(\"fish-free\")}>fish-free</option>\n           <option onClick={()=> sethealthLabel(\"shellfish-free\")}>shellfish-free</option>\n          </select>\n      </form>\n\n      <div className=\"app_recipes\">\n        {recipes.map(recipe =>{\n          return <RecipeTile recipe={recipe}/>;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}